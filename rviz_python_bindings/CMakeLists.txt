cmake_minimum_required(VERSION 3.17)
project(rviz_python_bindings)

set(shiboken_qt_components
  QtCore
  QtGui
  QtWidgets
)

find_package(ament_cmake REQUIRED)
find_package(ament_cmake_python REQUIRED)
find_package(python_qt_binding REQUIRED)
include(${python_qt_binding_DIR}/shiboken_helper.cmake) #${CMAKE_CURRENT_SOURCE_DIR}/../../python_qt_binding/cmake/shiboken_helper.cmake)#
find_package(Qt5 REQUIRED COMPONENTS Core Gui Widgets)
find_package(rviz_common REQUIRED)
find_package(Python3 COMPONENTS Development)

# name of the library to be generated by shiboken
set(shiboken_bindings_library "rviz_shiboken")
# path to the include wrapper used by shiboken for generation
set(shiboken_include_wrapper "${CMAKE_CURRENT_SOURCE_DIR}/conf/global.hpp")
# path to the typesystem file used by shiboken for generation
set(shiboken_typesystem "${CMAKE_CURRENT_SOURCE_DIR}/conf/typesystem.xml")
# sources generated by shiboken depends on typesystem
set(shiboken_generated_sources
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_shiboken_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_visualizerframepy_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_yamlconfigreader_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_yamlconfigwriter_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_config_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_config_mapiterator_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_visualizationframe_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_visualizationmanager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_displaygroup_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_display_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_viewmanager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_paneldockwidget_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_tool_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_toolmanager_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_properties_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_properties_property_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_properties_boolproperty_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_common_viewcontroller_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_rendering_ogrelogging_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/rviz_rendering_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${shiboken_bindings_library}/ogre_wrapper.cpp
)

ament_get_recursive_properties(deps_include_dirs _ ${rviz_common_TARGETS})
list(APPEND shiboken_include_dirs
    ${deps_include_dirs})
message(STATUS "ROS inlcude dirs: ${deps_include_dirs}")
message(STATUS "QT5 inlcude dirs: ${Qt5Core_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Gui_INCLUDE_DIRS}")
list(APPEND shiboken_include_dirs
    ${Qt5Core_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Gui_INCLUDE_DIRS}
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
)

add_library(rviz_python SHARED
  src/visualizer_frame_py.cpp
)

target_include_directories(rviz_python PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_options(rviz_python PUBLIC -Wl,--no-undefined)
ament_target_dependencies(rviz_python
  rviz_common
  Qt5
)

install(TARGETS rviz_python
  EXPORT export_rviz_python
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)


shiboken_generator_ext(
  "rviz_shiboken"                                         # TARGET
  "${shiboken_include_wrapper}"                             # INCLUDE WRAPPER
  "${shiboken_typesystem}"                                  # TYPSYSTEM
  "${CMAKE_CURRENT_BINARY_DIR}"                             # Working Directory
  "${shiboken_generated_sources}"                           # Generated Sources
  "${shiboken_include_dirs}"                                # INCLUDE DIRS
  "${CMAKE_CURRENT_BINARY_DIR}"                           # BUILD DIR
)

add_library(
  ${shiboken_bindings_library} MODULE 
  ${shiboken_generated_sources})

shiboken_include_directories(
  ${shiboken_bindings_library} 
  "${shiboken_qt_components}")

target_include_directories(
  ${shiboken_bindings_library} PRIVATE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
  ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}
)

target_link_libraries(
  ${shiboken_bindings_library} 
  Qt5::Core
  Qt5::Gui
  Qt5::Widgets
  rviz_python
)
ament_target_dependencies(
  ${shiboken_bindings_library}
  rviz_common
)
shiboken_target_link_libraries(${shiboken_bindings_library} ${shiboken_qt_components})



set_target_properties(${shiboken_bindings_library} PROPERTIES
PREFIX "")
set_property(TARGET ${shiboken_bindings_library} PROPERTY OUTPUT_NAME
"${shiboken_bindings_library}.${Python3_SOABI}")

if(WIN32)
    if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
        set_property(TARGET ${shiboken_bindings_library} PROPERTY SUFFIX "_d.pyd")
    else()
        set_property(TARGET ${shiboken_bindings_library} PROPERTY SUFFIX ".pyd")
    endif()
    target_link_libraries(
      ${shiboken_bindings_library}
      Python3_LIBRARIES
    )
endif()

ament_python_install_package(rviz)
install(TARGETS ${shiboken_bindings_library}
  LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/${PYTHON_INSTALL_DIR}/rviz
)


if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  find_package(ament_cmake_pytest REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)

  ament_lint_auto_find_test_dependencies()
endif()

ament_export_include_directories(
  include
)
ament_export_libraries(
  rviz_python
)
ament_export_targets(
  export_rviz_python
)

ament_package()
